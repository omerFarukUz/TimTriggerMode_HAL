
TimTriggerMode_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b24  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce8  08003ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf0  08003cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007c8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007d4  200007d4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012ea5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002253  00000000  00000000  00032f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  00035178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf6  00000000  00000000  000361f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002518b  00000000  00000000  00036eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011f6a  00000000  00000000  0005c079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e47ee  00000000  00000000  0006dfe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047ac  00000000  00000000  001527d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00156f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003cb8 	.word	0x08003cb8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003cb8 	.word	0x08003cb8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f8:	d103      	bne.n	8000502 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004fe:	f001 fb52 	bl	8001ba6 <HAL_GPIO_TogglePin>

	}

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40020400 	.word	0x40020400

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fcb2 	bl	8000e7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f836 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f9ac 	bl	8000878 <MX_GPIO_Init>
  MX_ETH_Init();
 8000520:	f000 f89c 	bl	800065c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000524:	f000 f950 	bl	80007c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000528:	f000 f978 	bl	800081c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800052c:	f000 f8e4 	bl	80006f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x6c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f06f 0201 	mvn.w	r2, #1
 8000538:	611a      	str	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  count_TIM2 = __HAL_TIM_GET_COUNTER(&htim2);
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <main+0x6c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0x70>)
 8000544:	801a      	strh	r2, [r3, #0]

	  if(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_TRIGGER))
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0x6c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000550:	2b40      	cmp	r3, #64	; 0x40
 8000552:	d1f2      	bne.n	800053a <main+0x2a>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x74>)
 800055a:	f001 fb24 	bl	8001ba6 <HAL_GPIO_TogglePin>

		  __HAL_TIM_ENABLE_IT(&htim2,TIM_FLAG_UPDATE);
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <main+0x6c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <main+0x6c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0201 	orr.w	r2, r2, #1
 800056c:	60da      	str	r2, [r3, #12]

		  __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_TRIGGER);
 800056e:	4b03      	ldr	r3, [pc, #12]	; (800057c <main+0x6c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000576:	611a      	str	r2, [r3, #16]
	  count_TIM2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000578:	e7df      	b.n	800053a <main+0x2a>
 800057a:	bf00      	nop
 800057c:	20000250 	.word	0x20000250
 8000580:	200007c4 	.word	0x200007c4
 8000584:	40020400 	.word	0x40020400

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fb61 	bl	8003c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005fc:	23a8      	movs	r3, #168	; 0xa8
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fbf3 	bl	8001df8 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f9dc 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fe54 	bl	80022e8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000646:	f000 f9c5 	bl	80009d4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_ETH_Init+0x84>)
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <MX_ETH_Init+0x88>)
 8000664:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ETH_Init+0x8c>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000674:	22e1      	movs	r2, #225	; 0xe1
 8000676:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_ETH_Init+0x8c>)
 800067a:	2200      	movs	r2, #0
 800067c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_ETH_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_ETH_Init+0x84>)
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <MX_ETH_Init+0x8c>)
 800068e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_ETH_Init+0x84>)
 8000692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000696:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_ETH_Init+0x84>)
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MX_ETH_Init+0x90>)
 800069c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_ETH_Init+0x84>)
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_ETH_Init+0x94>)
 80006a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_ETH_Init+0x84>)
 80006a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_ETH_Init+0x84>)
 80006ae:	f000 fd8d 	bl	80011cc <HAL_ETH_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b8:	f000 f98c 	bl	80009d4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006bc:	2238      	movs	r2, #56	; 0x38
 80006be:	2100      	movs	r1, #0
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_ETH_Init+0x98>)
 80006c2:	f003 facc 	bl	8003c5e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_ETH_Init+0x98>)
 80006c8:	2221      	movs	r2, #33	; 0x21
 80006ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_ETH_Init+0x98>)
 80006ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_ETH_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001a0 	.word	0x200001a0
 80006e4:	40028000 	.word	0x40028000
 80006e8:	200007c8 	.word	0x200007c8
 80006ec:	20000100 	.word	0x20000100
 80006f0:	20000060 	.word	0x20000060
 80006f4:	20000028 	.word	0x20000028

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_TIM2_Init+0xcc>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_TIM2_Init+0xcc>)
 800072e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_TIM2_Init+0xcc>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_TIM2_Init+0xcc>)
 800073c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_TIM2_Init+0xcc>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_TIM2_Init+0xcc>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074e:	481d      	ldr	r0, [pc, #116]	; (80007c4 <MX_TIM2_Init+0xcc>)
 8000750:	f001 ffea 	bl	8002728 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800075a:	f000 f93b 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4619      	mov	r1, r3
 800076a:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_TIM2_Init+0xcc>)
 800076c:	f002 f91b 	bl	80029a6 <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000776:	f000 f92d 	bl	80009d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800077a:	2306      	movs	r3, #6
 800077c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800077e:	2350      	movs	r3, #80	; 0x50
 8000780:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8000782:	2302      	movs	r3, #2
 8000784:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 8000786:	230f      	movs	r3, #15
 8000788:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_TIM2_Init+0xcc>)
 8000792:	f002 f9cf 	bl	8002b34 <HAL_TIM_SlaveConfigSynchro>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800079c:	f000 f91a 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM2_Init+0xcc>)
 80007ae:	f002 fc03 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80007b8:	f000 f90c 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000250 	.word	0x20000250

080007c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART3_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART3_UART_Init+0x4c>)
 8000800:	f002 fc6a 	bl	80030d8 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8e3 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000298 	.word	0x20000298
 8000818:	40004800 	.word	0x40004800

0800081c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000826:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2204      	movs	r2, #4
 800082c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2202      	movs	r2, #2
 8000832:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2202      	movs	r2, #2
 800083e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2201      	movs	r2, #1
 8000844:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2201      	movs	r2, #1
 8000856:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	f001 f9bb 	bl	8001bda <HAL_PCD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f8b3 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200002e0 	.word	0x200002e0

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a4b      	ldr	r2, [pc, #300]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a44      	ldr	r2, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a3d      	ldr	r2, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a36      	ldr	r2, [pc, #216]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0181 	movw	r1, #16513	; 0x4081
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <MX_GPIO_Init+0x150>)
 800093e:	f001 f919 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x154>)
 8000948:	f001 f914 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	481b      	ldr	r0, [pc, #108]	; (80009d0 <MX_GPIO_Init+0x158>)
 8000964:	f000 ff5a 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000968:	f244 0381 	movw	r3, #16513	; 0x4081
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_GPIO_Init+0x150>)
 8000982:	f000 ff4b 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0x154>)
 800099e:	f000 ff3d 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x154>)
 80009b6:	f000 ff31 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a55      	ldr	r2, [pc, #340]	; (8000ba4 <HAL_ETH_MspInit+0x174>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	f040 80a4 	bne.w	8000b9c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a52      	ldr	r2, [pc, #328]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a44      	ldr	r2, [pc, #272]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a3d      	ldr	r2, [pc, #244]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a36      	ldr	r2, [pc, #216]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b18:	2332      	movs	r3, #50	; 0x32
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481e      	ldr	r0, [pc, #120]	; (8000bac <HAL_ETH_MspInit+0x17c>)
 8000b34:	f000 fe72 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b38:	2386      	movs	r3, #134	; 0x86
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b48:	230b      	movs	r3, #11
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <HAL_ETH_MspInit+0x180>)
 8000b54:	f000 fe62 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <HAL_ETH_MspInit+0x184>)
 8000b76:	f000 fe51 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <HAL_ETH_MspInit+0x188>)
 8000b98:	f000 fe40 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40028000 	.word	0x40028000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40021800 	.word	0x40021800

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bdc:	d133      	bne.n	8000c46 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_Base_MspInit+0x94>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c16:	2301      	movs	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_TIM_Base_MspInit+0x98>)
 8000c32:	f000 fdf3 	bl	800181c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f000 fa8f 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c40:	201c      	movs	r0, #28
 8000c42:	f000 faa8 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12c      	bne.n	8000cd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000cd0:	f000 fda4 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020c00 	.word	0x40020c00

08000ce8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d08:	d13f      	bne.n	8000d8a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d26:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d38:	230a      	movs	r3, #10
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <HAL_PCD_MspInit+0xb0>)
 8000d44:	f000 fd6a 	bl	800181c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <HAL_PCD_MspInit+0xb0>)
 8000d5e:	f000 fd5d 	bl	800181c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_PCD_MspInit+0xac>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f89a 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f001 fce6 	bl	80027c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000250 	.word	0x20000250

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 ff0b 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fb59 	bl	8000510 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e6c:	08003cf8 	.word	0x08003cf8
  ldr r2, =_sbss
 8000e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e74:	200007d4 	.word	0x200007d4

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f94f 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fd96 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f967 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f92f 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200007d0 	.word	0x200007d0

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	200007d0 	.word	0x200007d0

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e06c      	b.n	80012b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2223      	movs	r2, #35	; 0x23
 80011ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fc1d 	bl	8000a30 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_ETH_Init+0xf4>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a30      	ldr	r2, [pc, #192]	; (80012c0 <HAL_ETH_Init+0xf4>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_ETH_Init+0xf4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_ETH_Init+0xf8>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_ETH_Init+0xf8>)
 8001218:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800121c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_ETH_Init+0xf8>)
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4927      	ldr	r1, [pc, #156]	; (80012c4 <HAL_ETH_Init+0xf8>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_ETH_Init+0xf8>)
 800122e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001248:	f7ff fe7e 	bl	8000f48 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800124e:	e011      	b.n	8001274 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001250:	f7ff fe7a 	bl	8000f48 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125e:	d909      	bls.n	8001274 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2204      	movs	r2, #4
 8001264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	22e0      	movs	r2, #224	; 0xe0
 800126c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e021      	b.n	80012b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1e4      	bne.n	8001250 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f958 	bl	800153c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f9ff 	bl	8001690 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fa55 	bl	8001742 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	461a      	mov	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f9bd 	bl	8001620 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2210      	movs	r2, #16
 80012b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800

080012c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4b51      	ldr	r3, [pc, #324]	; (8001424 <ETH_SetMACConfig+0x15c>)
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	7c1b      	ldrb	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <ETH_SetMACConfig+0x28>
 80012ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ee:	e000      	b.n	80012f2 <ETH_SetMACConfig+0x2a>
 80012f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	7c5b      	ldrb	r3, [r3, #17]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <ETH_SetMACConfig+0x38>
 80012fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012fe:	e000      	b.n	8001302 <ETH_SetMACConfig+0x3a>
 8001300:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001302:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	7fdb      	ldrb	r3, [r3, #31]
 800130e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001310:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001316:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	7f92      	ldrb	r2, [r2, #30]
 800131c:	2a00      	cmp	r2, #0
 800131e:	d102      	bne.n	8001326 <ETH_SetMACConfig+0x5e>
 8001320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001324:	e000      	b.n	8001328 <ETH_SetMACConfig+0x60>
 8001326:	2200      	movs	r2, #0
                        macconf->Speed |
 8001328:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	7f1b      	ldrb	r3, [r3, #28]
 800132e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001330:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	791b      	ldrb	r3, [r3, #4]
 800133c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800133e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001346:	2a00      	cmp	r2, #0
 8001348:	d102      	bne.n	8001350 <ETH_SetMACConfig+0x88>
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	e000      	b.n	8001352 <ETH_SetMACConfig+0x8a>
 8001350:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001352:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	7bdb      	ldrb	r3, [r3, #15]
 8001358:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800135a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001360:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001368:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136a:	4313      	orrs	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff fdec 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d101      	bne.n	80013b6 <ETH_SetMACConfig+0xee>
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	e000      	b.n	80013b8 <ETH_SetMACConfig+0xf0>
 80013b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013c6:	2a01      	cmp	r2, #1
 80013c8:	d101      	bne.n	80013ce <ETH_SetMACConfig+0x106>
 80013ca:	2208      	movs	r2, #8
 80013cc:	e000      	b.n	80013d0 <ETH_SetMACConfig+0x108>
 80013ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d101      	bne.n	80013e0 <ETH_SetMACConfig+0x118>
 80013dc:	2204      	movs	r2, #4
 80013de:	e000      	b.n	80013e2 <ETH_SetMACConfig+0x11a>
 80013e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013ea:	2a01      	cmp	r2, #1
 80013ec:	d101      	bne.n	80013f2 <ETH_SetMACConfig+0x12a>
 80013ee:	2202      	movs	r2, #2
 80013f0:	e000      	b.n	80013f4 <ETH_SetMACConfig+0x12c>
 80013f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f4:	4313      	orrs	r3, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fda7 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	ff20810f 	.word	0xff20810f

08001428 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <ETH_SetDMAConfig+0x110>)
 8001442:	4013      	ands	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	7b1b      	ldrb	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <ETH_SetDMAConfig+0x2c>
 800144e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001452:	e000      	b.n	8001456 <ETH_SetDMAConfig+0x2e>
 8001454:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7b5b      	ldrb	r3, [r3, #13]
 800145a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800145c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	7f52      	ldrb	r2, [r2, #29]
 8001462:	2a00      	cmp	r2, #0
 8001464:	d102      	bne.n	800146c <ETH_SetDMAConfig+0x44>
 8001466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800146a:	e000      	b.n	800146e <ETH_SetDMAConfig+0x46>
 800146c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800146e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	7b9b      	ldrb	r3, [r3, #14]
 8001474:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001476:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800147c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
 8001482:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001484:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	7f9b      	ldrb	r3, [r3, #30]
 800148a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800148c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001492:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800149a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800149c:	4313      	orrs	r3, r2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fd4e 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	461a      	mov	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001500:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800150a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800150e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fd1f 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	f8de3f23 	.word	0xf8de3f23

0800153c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a6      	sub	sp, #152	; 0x98
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001544:	2301      	movs	r3, #1
 8001546:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001550:	2300      	movs	r3, #0
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001578:	2300      	movs	r3, #0
 800157a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001582:	2300      	movs	r3, #0
 8001584:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800159e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fe86 	bl	80012c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015bc:	2301      	movs	r3, #1
 80015be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff08 	bl	8001428 <ETH_SetDMAConfig>
}
 8001618:	bf00      	nop
 800161a:	3798      	adds	r7, #152	; 0x98
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3305      	adds	r3, #5
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	3204      	adds	r2, #4
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <ETH_MACAddressConfig+0x68>)
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3303      	adds	r3, #3
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	061a      	lsls	r2, r3, #24
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3302      	adds	r3, #2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3301      	adds	r3, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4313      	orrs	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <ETH_MACAddressConfig+0x6c>)
 8001672:	4413      	add	r3, r2
 8001674:	461a      	mov	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40028040 	.word	0x40028040
 800168c:	40028044 	.word	0x40028044

08001690 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e03e      	b.n	800171c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68d9      	ldr	r1, [r3, #12]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	3206      	adds	r2, #6
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d80c      	bhi.n	8001700 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68d9      	ldr	r1, [r3, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	e004      	b.n	800170a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d9bd      	bls.n	800169e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	611a      	str	r2, [r3, #16]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e046      	b.n	80017de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800178c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001794:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	3212      	adds	r2, #18
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d80c      	bhi.n	80017ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6919      	ldr	r1, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	461a      	mov	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	e004      	b.n	80017d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d9b5      	bls.n	8001750 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180e:	60da      	str	r2, [r3, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	; 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e177      	b.n	8001b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8166 	bne.w	8001b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	2b02      	cmp	r3, #2
 800186c:	d130      	bne.n	80018d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d017      	beq.n	800190c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d123      	bne.n	8001960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	08da      	lsrs	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3208      	adds	r2, #8
 8001920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	69b9      	ldr	r1, [r7, #24]
 800195c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80c0 	beq.w	8001b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <HAL_GPIO_Init+0x324>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_GPIO_Init+0x324>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_GPIO_Init+0x324>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019be:	4a61      	ldr	r2, [pc, #388]	; (8001b44 <HAL_GPIO_Init+0x328>)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_GPIO_Init+0x32c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d037      	beq.n	8001a5a <HAL_GPIO_Init+0x23e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a57      	ldr	r2, [pc, #348]	; (8001b4c <HAL_GPIO_Init+0x330>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d031      	beq.n	8001a56 <HAL_GPIO_Init+0x23a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a56      	ldr	r2, [pc, #344]	; (8001b50 <HAL_GPIO_Init+0x334>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d02b      	beq.n	8001a52 <HAL_GPIO_Init+0x236>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a55      	ldr	r2, [pc, #340]	; (8001b54 <HAL_GPIO_Init+0x338>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d025      	beq.n	8001a4e <HAL_GPIO_Init+0x232>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_GPIO_Init+0x33c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01f      	beq.n	8001a4a <HAL_GPIO_Init+0x22e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_GPIO_Init+0x340>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x22a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_GPIO_Init+0x344>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x226>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <HAL_GPIO_Init+0x348>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x222>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_GPIO_Init+0x34c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x21e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <HAL_GPIO_Init+0x350>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x21a>
 8001a32:	2309      	movs	r3, #9
 8001a34:	e012      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a36:	230a      	movs	r3, #10
 8001a38:	e010      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	e00e      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a3e:	2307      	movs	r3, #7
 8001a40:	e00c      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00a      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a46:	2305      	movs	r3, #5
 8001a48:	e008      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x240>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	4093      	lsls	r3, r2
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x328>)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac8:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_GPIO_Init+0x354>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	f67f ae84 	bls.w	8001838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40021400 	.word	0x40021400
 8001b60:	40021800 	.word	0x40021800
 8001b64:	40021c00 	.word	0x40021c00
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40022400 	.word	0x40022400
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb8:	887a      	ldrh	r2, [r7, #2]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	041a      	lsls	r2, r3, #16
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af02      	add	r7, sp, #8
 8001be0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e101      	b.n	8001df0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff f86e 	bl	8000ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1a:	d102      	bne.n	8001c22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fd7e 	bl	8003728 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c1a      	ldrb	r2, [r3, #16]
 8001c34:	f88d 2000 	strb.w	r2, [sp]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	f001 fd10 	bl	8003660 <USB_CoreInit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0ce      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fd76 	bl	800374a <USB_SetCurrentMode>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0bf      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e04a      	b.n	8001d0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3315      	adds	r3, #21
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3314      	adds	r3, #20
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	332e      	adds	r3, #46	; 0x2e
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	331c      	adds	r3, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3320      	adds	r3, #32
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3324      	adds	r3, #36	; 0x24
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	791b      	ldrb	r3, [r3, #4]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d3af      	bcc.n	8001c76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	e044      	b.n	8001da6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3b5      	bcc.n	8001d1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7c1a      	ldrb	r2, [r3, #16]
 8001db8:	f88d 2000 	strb.w	r2, [sp]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc0:	f001 fd10 	bl	80037e4 <USB_DevInit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00c      	b.n	8001df0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fed8 	bl	8003b9e <USB_DevDisconnect>

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e267      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d075      	beq.n	8001f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d00c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d157      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e242      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x74>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6f      	ldr	r2, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6c      	ldr	r2, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e90:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a68      	ldr	r2, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f84a 	bl	8000f48 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f846 	bl	8000f48 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e207      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f836 	bl	8000f48 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f832 	bl	8000f48 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1f3      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xe8>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c7      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ffeb 	bl	8000f48 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe ffe7 	bl	8000f48 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a8      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ffca 	bl	8000f48 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ffc6 	bl	8000f48 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e187      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d036      	beq.n	8002050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe ffaa 	bl	8000f48 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe ffa6 	bl	8000f48 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e167      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8002016:	e01b      	b.n	8002050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe ff93 	bl	8000f48 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e00e      	b.n	8002044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7fe ff8f 	bl	8000f48 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d907      	bls.n	8002044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e150      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002038:	40023800 	.word	0x40023800
 800203c:	42470000 	.word	0x42470000
 8002040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ea      	bne.n	8002026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8097 	beq.w	800218c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a7c      	ldr	r2, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b7a      	ldr	r3, [pc, #488]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b77      	ldr	r3, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x474>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x474>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a73      	ldr	r2, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff4f 	bl	8000f48 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7fe ff4b 	bl	8000f48 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e10c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x30c>
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5e      	ldr	r2, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a54      	ldr	r2, [pc, #336]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe ff10 	bl	8000f48 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe ff0c 	bl	8000f48 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0cb      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ee      	beq.n	800212c <HAL_RCC_OscConfig+0x334>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe fefa 	bl	8000f48 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe fef6 	bl	8000f48 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0b5      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ee      	bne.n	8002158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a1 	beq.w	80022d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d05c      	beq.n	800225c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d141      	bne.n	800222e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe feca 	bl	8000f48 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe fec6 	bl	8000f48 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e087      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fe9f 	bl	8000f48 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe fe9b 	bl	8000f48 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e05c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x416>
 800222c:	e054      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe fe88 	bl	8000f48 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fe84 	bl	8000f48 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e045      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
 800225a:	e03d      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e038      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d028      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d121      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11a      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fdb6 	bl	8000f48 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fdb2 	bl	8000f48 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd16 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08003cd0 	.word	0x08003cd0
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b094      	sub	sp, #80	; 0x50
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
 80024c0:	2300      	movs	r3, #0
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	2300      	movs	r3, #0
 80024c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d00d      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x40>
 80024d8:	2b08      	cmp	r3, #8
 80024da:	f200 80e1 	bhi.w	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x34>
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x3a>
 80024e6:	e0db      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024ec:	e0db      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_GetSysClockFreq+0x208>)
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f2:	e0d8      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	2200      	movs	r2, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
 8002514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002538:	0150      	lsls	r0, r2, #5
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4621      	mov	r1, r4
 8002540:	1a51      	subs	r1, r2, r1
 8002542:	6139      	str	r1, [r7, #16]
 8002544:	4629      	mov	r1, r5
 8002546:	eb63 0301 	sbc.w	r3, r3, r1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002558:	4659      	mov	r1, fp
 800255a:	018b      	lsls	r3, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002562:	4651      	mov	r1, sl
 8002564:	018a      	lsls	r2, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	ebb2 0801 	subs.w	r8, r2, r1
 800256c:	4659      	mov	r1, fp
 800256e:	eb63 0901 	sbc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	462b      	mov	r3, r5
 8002594:	eb49 0303 	adc.w	r3, r9, r3
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025a6:	4629      	mov	r1, r5
 80025a8:	024b      	lsls	r3, r1, #9
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b0:	4621      	mov	r1, r4
 80025b2:	024a      	lsls	r2, r1, #9
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	2200      	movs	r2, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c4:	f7fd fe12 	bl	80001ec <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d0:	e058      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	4611      	mov	r1, r2
 80025de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	0159      	lsls	r1, r3, #5
 80025fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fe:	0150      	lsls	r0, r2, #5
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4641      	mov	r1, r8
 8002606:	ebb2 0a01 	subs.w	sl, r2, r1
 800260a:	4649      	mov	r1, r9
 800260c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800261c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002624:	ebb2 040a 	subs.w	r4, r2, sl
 8002628:	eb63 050b 	sbc.w	r5, r3, fp
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	00eb      	lsls	r3, r5, #3
 8002636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4643      	mov	r3, r8
 8002642:	18e3      	adds	r3, r4, r3
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	464b      	mov	r3, r9
 8002648:	eb45 0303 	adc.w	r3, r5, r3
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265a:	4629      	mov	r1, r5
 800265c:	028b      	lsls	r3, r1, #10
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002664:	4621      	mov	r1, r4
 8002666:	028a      	lsls	r2, r1, #10
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266e:	2200      	movs	r2, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	61fa      	str	r2, [r7, #28]
 8002674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002678:	f7fd fdb8 	bl	80001ec <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3750      	adds	r7, #80	; 0x50
 80026ac:	46bd      	mov	sp, r7
 80026ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08003ce0 	.word	0x08003ce0

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002704:	f7ff ffdc 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0b5b      	lsrs	r3, r3, #13
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08003ce0 	.word	0x08003ce0

08002728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e041      	b.n	80027be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fa34 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 fa4e 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01b      	beq.n	800282a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0202 	mvn.w	r2, #2
 80027fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f9db 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002816:	e005      	b.n	8002824 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9cd 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9de 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01b      	beq.n	8002876 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0204 	mvn.w	r2, #4
 8002846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9b5 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002862:	e005      	b.n	8002870 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9a7 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f9b8 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01b      	beq.n	80028c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0208 	mvn.w	r2, #8
 8002892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f98f 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 80028ae:	e005      	b.n	80028bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f981 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f992 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01b      	beq.n	800290e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0210 	mvn.w	r2, #16
 80028de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2208      	movs	r2, #8
 80028e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f969 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 80028fa:	e005      	b.n	8002908 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f95b 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f96c 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00c      	beq.n	8002932 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0201 	mvn.w	r2, #1
 800292a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fd fddb 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fbb7 	bl	80030c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f93d 	bl	8002bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00c      	beq.n	800299e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0220 	mvn.w	r2, #32
 8002996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fb89 	bl	80030b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_ConfigClockSource+0x1c>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0b4      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x186>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d03e      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0xd4>
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a00:	f200 8087 	bhi.w	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	f000 8086 	beq.w	8002b18 <HAL_TIM_ConfigClockSource+0x172>
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d87f      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a12:	2b70      	cmp	r3, #112	; 0x70
 8002a14:	d01a      	beq.n	8002a4c <HAL_TIM_ConfigClockSource+0xa6>
 8002a16:	2b70      	cmp	r3, #112	; 0x70
 8002a18:	d87b      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a1a:	2b60      	cmp	r3, #96	; 0x60
 8002a1c:	d050      	beq.n	8002ac0 <HAL_TIM_ConfigClockSource+0x11a>
 8002a1e:	2b60      	cmp	r3, #96	; 0x60
 8002a20:	d877      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a22:	2b50      	cmp	r3, #80	; 0x50
 8002a24:	d03c      	beq.n	8002aa0 <HAL_TIM_ConfigClockSource+0xfa>
 8002a26:	2b50      	cmp	r3, #80	; 0x50
 8002a28:	d873      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d058      	beq.n	8002ae0 <HAL_TIM_ConfigClockSource+0x13a>
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d86f      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a32:	2b30      	cmp	r3, #48	; 0x30
 8002a34:	d064      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x15a>
 8002a36:	2b30      	cmp	r3, #48	; 0x30
 8002a38:	d86b      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d060      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x15a>
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d867      	bhi.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d05c      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x15a>
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d05a      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x15a>
 8002a4a:	e062      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a5c:	f000 fa8b 	bl	8002f76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
      break;
 8002a78:	e04f      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a8a:	f000 fa74 	bl	8002f76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a9c:	609a      	str	r2, [r3, #8]
      break;
 8002a9e:	e03c      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aac:	461a      	mov	r2, r3
 8002aae:	f000 f9e8 	bl	8002e82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2150      	movs	r1, #80	; 0x50
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fa41 	bl	8002f40 <TIM_ITRx_SetConfig>
      break;
 8002abe:	e02c      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002acc:	461a      	mov	r2, r3
 8002ace:	f000 fa07 	bl	8002ee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2160      	movs	r1, #96	; 0x60
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fa31 	bl	8002f40 <TIM_ITRx_SetConfig>
      break;
 8002ade:	e01c      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aec:	461a      	mov	r2, r3
 8002aee:	f000 f9c8 	bl	8002e82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fa21 	bl	8002f40 <TIM_ITRx_SetConfig>
      break;
 8002afe:	e00c      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f000 fa18 	bl	8002f40 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e003      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      break;
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e031      	b.n	8002bb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8fe 	bl	8002d60 <TIM_SlaveTimer_SetConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e018      	b.n	8002bb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a46      	ldr	r2, [pc, #280]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d00f      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <TIM_Base_SetConfig+0x130>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a42      	ldr	r2, [pc, #264]	; (8002d3c <TIM_Base_SetConfig+0x134>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a41      	ldr	r2, [pc, #260]	; (8002d40 <TIM_Base_SetConfig+0x138>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d108      	bne.n	8002c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a35      	ldr	r2, [pc, #212]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d027      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <TIM_Base_SetConfig+0x130>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d023      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a31      	ldr	r2, [pc, #196]	; (8002d3c <TIM_Base_SetConfig+0x134>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <TIM_Base_SetConfig+0x138>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d017      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	; (8002d48 <TIM_Base_SetConfig+0x140>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <TIM_Base_SetConfig+0x144>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00f      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <TIM_Base_SetConfig+0x148>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <TIM_Base_SetConfig+0x14c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <TIM_Base_SetConfig+0x150>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <TIM_Base_SetConfig+0x154>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <TIM_Base_SetConfig+0x12c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <TIM_Base_SetConfig+0x13c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d103      	bne.n	8002d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]
  }
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40014400 	.word	0x40014400
 8002d50:	40014800 	.word	0x40014800
 8002d54:	40001800 	.word	0x40001800
 8002d58:	40001c00 	.word	0x40001c00
 8002d5c:	40002000 	.word	0x40002000

08002d60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b70      	cmp	r3, #112	; 0x70
 8002da8:	d01a      	beq.n	8002de0 <TIM_SlaveTimer_SetConfig+0x80>
 8002daa:	2b70      	cmp	r3, #112	; 0x70
 8002dac:	d860      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002dae:	2b60      	cmp	r3, #96	; 0x60
 8002db0:	d054      	beq.n	8002e5c <TIM_SlaveTimer_SetConfig+0xfc>
 8002db2:	2b60      	cmp	r3, #96	; 0x60
 8002db4:	d85c      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002db6:	2b50      	cmp	r3, #80	; 0x50
 8002db8:	d046      	beq.n	8002e48 <TIM_SlaveTimer_SetConfig+0xe8>
 8002dba:	2b50      	cmp	r3, #80	; 0x50
 8002dbc:	d858      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d019      	beq.n	8002df6 <TIM_SlaveTimer_SetConfig+0x96>
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d854      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002dc6:	2b30      	cmp	r3, #48	; 0x30
 8002dc8:	d055      	beq.n	8002e76 <TIM_SlaveTimer_SetConfig+0x116>
 8002dca:	2b30      	cmp	r3, #48	; 0x30
 8002dcc:	d850      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d051      	beq.n	8002e76 <TIM_SlaveTimer_SetConfig+0x116>
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d84c      	bhi.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04d      	beq.n	8002e76 <TIM_SlaveTimer_SetConfig+0x116>
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d04b      	beq.n	8002e76 <TIM_SlaveTimer_SetConfig+0x116>
 8002dde:	e047      	b.n	8002e70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002df0:	f000 f8c1 	bl	8002f76 <TIM_ETR_SetConfig>
      break;
 8002df4:	e040      	b.n	8002e78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d101      	bne.n	8002e02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e03b      	b.n	8002e7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
      break;
 8002e46:	e017      	b.n	8002e78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e54:	461a      	mov	r2, r3
 8002e56:	f000 f814 	bl	8002e82 <TIM_TI1_ConfigInputStage>
      break;
 8002e5a:	e00d      	b.n	8002e78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f000 f839 	bl	8002ee0 <TIM_TI2_ConfigInputStage>
      break;
 8002e6e:	e003      	b.n	8002e78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
      break;
 8002e74:	e000      	b.n	8002e78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002e76:	bf00      	nop
  }

  return status;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 0201 	bic.w	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 030a 	bic.w	r3, r3, #10
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0210 	bic.w	r2, r3, #16
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	031b      	lsls	r3, r3, #12
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	621a      	str	r2, [r3, #32]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f043 0307 	orr.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e05a      	b.n	8003086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d022      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d01d      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d018      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a15      	ldr	r2, [pc, #84]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10c      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	4313      	orrs	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40010400 	.word	0x40010400
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40001800 	.word	0x40001800

080030b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e042      	b.n	8003170 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fdaa 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f82b 	bl	8003178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0c0      	sub	sp, #256	; 0x100
 800317e:	af00      	add	r7, sp, #0
 8003180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	ea40 0301 	orr.w	r3, r0, r1
 80031a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031d0:	f021 010c 	bic.w	r1, r1, #12
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	6999      	ldr	r1, [r3, #24]
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	ea40 0301 	orr.w	r3, r0, r1
 80031fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <UART_SetConfig+0x2cc>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d005      	beq.n	8003218 <UART_SetConfig+0xa0>
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <UART_SetConfig+0x2d0>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d104      	bne.n	8003222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff fa72 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 800321c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003220:	e003      	b.n	800322a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003222:	f7ff fa59 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003234:	f040 810c 	bne.w	8003450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	1891      	adds	r1, r2, r2
 8003250:	65b9      	str	r1, [r7, #88]	; 0x58
 8003252:	415b      	adcs	r3, r3
 8003254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800325a:	4621      	mov	r1, r4
 800325c:	eb12 0801 	adds.w	r8, r2, r1
 8003260:	4629      	mov	r1, r5
 8003262:	eb43 0901 	adc.w	r9, r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327a:	4690      	mov	r8, r2
 800327c:	4699      	mov	r9, r3
 800327e:	4623      	mov	r3, r4
 8003280:	eb18 0303 	adds.w	r3, r8, r3
 8003284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003288:	462b      	mov	r3, r5
 800328a:	eb49 0303 	adc.w	r3, r9, r3
 800328e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800329e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032a6:	460b      	mov	r3, r1
 80032a8:	18db      	adds	r3, r3, r3
 80032aa:	653b      	str	r3, [r7, #80]	; 0x50
 80032ac:	4613      	mov	r3, r2
 80032ae:	eb42 0303 	adc.w	r3, r2, r3
 80032b2:	657b      	str	r3, [r7, #84]	; 0x54
 80032b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032bc:	f7fc ff96 	bl	80001ec <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b61      	ldr	r3, [pc, #388]	; (800344c <UART_SetConfig+0x2d4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80032e8:	415b      	adcs	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032f0:	4641      	mov	r1, r8
 80032f2:	eb12 0a01 	adds.w	sl, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0b01 	adc.w	fp, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800330c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003310:	4692      	mov	sl, r2
 8003312:	469b      	mov	fp, r3
 8003314:	4643      	mov	r3, r8
 8003316:	eb1a 0303 	adds.w	r3, sl, r3
 800331a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800331e:	464b      	mov	r3, r9
 8003320:	eb4b 0303 	adc.w	r3, fp, r3
 8003324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800333c:	460b      	mov	r3, r1
 800333e:	18db      	adds	r3, r3, r3
 8003340:	643b      	str	r3, [r7, #64]	; 0x40
 8003342:	4613      	mov	r3, r2
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	647b      	str	r3, [r7, #68]	; 0x44
 800334a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800334e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003352:	f7fc ff4b 	bl	80001ec <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4611      	mov	r1, r2
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <UART_SetConfig+0x2d4>)
 800335e:	fba3 2301 	umull	r2, r3, r3, r1
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2264      	movs	r2, #100	; 0x64
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	1acb      	subs	r3, r1, r3
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <UART_SetConfig+0x2d4>)
 8003374:	fba3 2302 	umull	r2, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003380:	441c      	add	r4, r3
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800338c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	63b9      	str	r1, [r7, #56]	; 0x38
 800339c:	415b      	adcs	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033a4:	4641      	mov	r1, r8
 80033a6:	1851      	adds	r1, r2, r1
 80033a8:	6339      	str	r1, [r7, #48]	; 0x30
 80033aa:	4649      	mov	r1, r9
 80033ac:	414b      	adcs	r3, r1
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033bc:	4659      	mov	r1, fp
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4651      	mov	r1, sl
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4642      	mov	r2, r8
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d8:	464b      	mov	r3, r9
 80033da:	460a      	mov	r2, r1
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033f8:	460b      	mov	r3, r1
 80033fa:	18db      	adds	r3, r3, r3
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fe:	4613      	mov	r3, r2
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800340a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800340e:	f7fc feed 	bl	80001ec <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <UART_SetConfig+0x2d4>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2164      	movs	r1, #100	; 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3332      	adds	r3, #50	; 0x32
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <UART_SetConfig+0x2d4>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	f003 0207 	and.w	r2, r3, #7
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4422      	add	r2, r4
 800343e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003440:	e106      	b.n	8003650 <UART_SetConfig+0x4d8>
 8003442:	bf00      	nop
 8003444:	40011000 	.word	0x40011000
 8003448:	40011400 	.word	0x40011400
 800344c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800345a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800345e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	1891      	adds	r1, r2, r2
 8003468:	6239      	str	r1, [r7, #32]
 800346a:	415b      	adcs	r3, r3
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003472:	4641      	mov	r1, r8
 8003474:	1854      	adds	r4, r2, r1
 8003476:	4649      	mov	r1, r9
 8003478:	eb43 0501 	adc.w	r5, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003498:	464b      	mov	r3, r9
 800349a:	eb45 0303 	adc.w	r3, r5, r3
 800349e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034be:	4629      	mov	r1, r5
 80034c0:	008b      	lsls	r3, r1, #2
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c8:	4621      	mov	r1, r4
 80034ca:	008a      	lsls	r2, r1, #2
 80034cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034d0:	f7fc fe8c 	bl	80001ec <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4b60      	ldr	r3, [pc, #384]	; (800365c <UART_SetConfig+0x4e4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011c      	lsls	r4, r3, #4
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	61b9      	str	r1, [r7, #24]
 80034fc:	415b      	adcs	r3, r3
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6139      	str	r1, [r7, #16]
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	67bb      	str	r3, [r7, #120]	; 0x78
 800354e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800355c:	4649      	mov	r1, r9
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	4641      	mov	r1, r8
 8003562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003566:	4641      	mov	r1, r8
 8003568:	008a      	lsls	r2, r1, #2
 800356a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800356e:	f7fc fe3d 	bl	80001ec <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4611      	mov	r1, r2
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <UART_SetConfig+0x4e4>)
 800357a:	fba3 2301 	umull	r2, r3, r3, r1
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2264      	movs	r2, #100	; 0x64
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	1acb      	subs	r3, r1, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a33      	ldr	r2, [pc, #204]	; (800365c <UART_SetConfig+0x4e4>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003598:	441c      	add	r4, r3
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	673b      	str	r3, [r7, #112]	; 0x70
 80035a2:	677a      	str	r2, [r7, #116]	; 0x74
 80035a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	415b      	adcs	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ea:	464b      	mov	r3, r9
 80035ec:	460a      	mov	r2, r1
 80035ee:	eb42 0303 	adc.w	r3, r2, r3
 80035f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	663b      	str	r3, [r7, #96]	; 0x60
 80035fe:	667a      	str	r2, [r7, #100]	; 0x64
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800360c:	4649      	mov	r1, r9
 800360e:	008b      	lsls	r3, r1, #2
 8003610:	4641      	mov	r1, r8
 8003612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003616:	4641      	mov	r1, r8
 8003618:	008a      	lsls	r2, r1, #2
 800361a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800361e:	f7fc fde5 	bl	80001ec <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <UART_SetConfig+0x4e4>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <UART_SetConfig+0x4e4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4422      	add	r2, r4
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003656:	46bd      	mov	sp, r7
 8003658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003660:	b084      	sub	sp, #16
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	f107 001c 	add.w	r0, r7, #28
 800366e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003672:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003676:	2b01      	cmp	r3, #1
 8003678:	d123      	bne.n	80036c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800368e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faa0 	bl	8003bfc <USB_CoreReset>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e01b      	b.n	80036fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa94 	bl	8003bfc <USB_CoreReset>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
 80036ec:	e005      	b.n	80036fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036fa:	7fbb      	ldrb	r3, [r7, #30]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10b      	bne.n	8003718 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f043 0206 	orr.w	r2, r3, #6
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003724:	b004      	add	sp, #16
 8003726:	4770      	bx	lr

08003728 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 0201 	bic.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d115      	bne.n	8003798 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003778:	200a      	movs	r0, #10
 800377a:	f7fd fbf1 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	330a      	adds	r3, #10
 8003782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fa2b 	bl	8003be0 <USB_GetMode>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d01e      	beq.n	80037ce <USB_SetCurrentMode+0x84>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2bc7      	cmp	r3, #199	; 0xc7
 8003794:	d9f0      	bls.n	8003778 <USB_SetCurrentMode+0x2e>
 8003796:	e01a      	b.n	80037ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037aa:	200a      	movs	r0, #10
 80037ac:	f7fd fbd8 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	330a      	adds	r3, #10
 80037b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fa12 	bl	8003be0 <USB_GetMode>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <USB_SetCurrentMode+0x84>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2bc7      	cmp	r3, #199	; 0xc7
 80037c6:	d9f0      	bls.n	80037aa <USB_SetCurrentMode+0x60>
 80037c8:	e001      	b.n	80037ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e005      	b.n	80037da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2bc8      	cmp	r3, #200	; 0xc8
 80037d2:	d101      	bne.n	80037d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037e4:	b084      	sub	sp, #16
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e009      	b.n	8003818 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	2200      	movs	r2, #0
 8003810:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3301      	adds	r3, #1
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b0e      	cmp	r3, #14
 800381c:	d9f2      	bls.n	8003804 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800381e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11c      	bne.n	8003860 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
 800385e:	e00b      	b.n	8003878 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800387e:	461a      	mov	r2, r3
 8003880:	2300      	movs	r3, #0
 8003882:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003884:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10d      	bne.n	80038a8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800388c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003894:	2100      	movs	r1, #0
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f968 	bl	8003b6c <USB_SetDevSpeed>
 800389c:	e008      	b.n	80038b0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800389e:	2101      	movs	r1, #1
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f963 	bl	8003b6c <USB_SetDevSpeed>
 80038a6:	e003      	b.n	80038b0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038a8:	2103      	movs	r1, #3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f95e 	bl	8003b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038b0:	2110      	movs	r1, #16
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8fa 	bl	8003aac <USB_FlushTxFifo>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f924 	bl	8003b10 <USB_FlushRxFifo>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	461a      	mov	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e4:	461a      	mov	r2, r3
 80038e6:	2300      	movs	r3, #0
 80038e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e043      	b.n	8003984 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003912:	d118      	bne.n	8003946 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e013      	b.n	8003958 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e008      	b.n	8003958 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	461a      	mov	r2, r3
 8003966:	2300      	movs	r3, #0
 8003968:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	461a      	mov	r2, r3
 8003978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800397c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3301      	adds	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003988:	461a      	mov	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4293      	cmp	r3, r2
 800398e:	d3b5      	bcc.n	80038fc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e043      	b.n	8003a1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ac:	d118      	bne.n	80039e0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	e013      	b.n	80039f2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	461a      	mov	r2, r3
 80039d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e008      	b.n	80039f2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	461a      	mov	r2, r3
 80039ee:	2300      	movs	r3, #0
 80039f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a22:	461a      	mov	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d3b5      	bcc.n	8003996 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 0210 	orr.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <USB_DevInit+0x2c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f043 0208 	orr.w	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa4:	b004      	add	sp, #16
 8003aa6:	4770      	bx	lr
 8003aa8:	803c3800 	.word	0x803c3800

08003aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ac6:	d901      	bls.n	8003acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e01b      	b.n	8003b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	daf2      	bge.n	8003aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	019b      	lsls	r3, r3, #6
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003af0:	d901      	bls.n	8003af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e006      	b.n	8003b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d0f0      	beq.n	8003ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b28:	d901      	bls.n	8003b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e018      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	daf2      	bge.n	8003b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b4c:	d901      	bls.n	8003b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e006      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d0f0      	beq.n	8003b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bb8:	f023 0303 	bic.w	r3, r3, #3
 8003bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c14:	d901      	bls.n	8003c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e01b      	b.n	8003c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	daf2      	bge.n	8003c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c3e:	d901      	bls.n	8003c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d0f0      	beq.n	8003c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <memset>:
 8003c5e:	4402      	add	r2, r0
 8003c60:	4603      	mov	r3, r0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d100      	bne.n	8003c68 <memset+0xa>
 8003c66:	4770      	bx	lr
 8003c68:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6c:	e7f9      	b.n	8003c62 <memset+0x4>
	...

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4d0d      	ldr	r5, [pc, #52]	; (8003ca8 <__libc_init_array+0x38>)
 8003c74:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <__libc_init_array+0x3c>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	4d0b      	ldr	r5, [pc, #44]	; (8003cb0 <__libc_init_array+0x40>)
 8003c82:	4c0c      	ldr	r4, [pc, #48]	; (8003cb4 <__libc_init_array+0x44>)
 8003c84:	f000 f818 	bl	8003cb8 <_init>
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08003cf0 	.word	0x08003cf0
 8003cac:	08003cf0 	.word	0x08003cf0
 8003cb0:	08003cf0 	.word	0x08003cf0
 8003cb4:	08003cf4 	.word	0x08003cf4

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr
